=begin
#Aspose.Words for Cloud API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 17.12

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require 'date'

module SwaggerClient
  # container class for pdf save options
  class PdfSaveOptionsData
    # Gets or sets a value determining how colors are rendered. { Normal | Grayscale}
    attr_accessor :color_mode

    # format of save
    attr_accessor :save_format

    # name of destination file
    attr_accessor :file_name

    # Gets or sets a value determining how DrawingML shapes are rendered. { Fallback | DrawingML }
    attr_accessor :dml_rendering_mode

    # Gets or sets a value determining how DrawingML effects are rendered. { Simplified | None | Fine }
    attr_accessor :dml_effects_rendering_mode

    # Controls zip output or not. Default value is false.
    attr_accessor :zip_output

    # Gets or sets value determining whether content of  is updated before saving.
    attr_accessor :update_sdt_content

    # Gets or sets a value determining if fields should be updated before saving the document to a fixed page format. Default value for this property is true
    attr_accessor :update_fields

    # Determines the quality of the JPEG images inside PDF document.
    attr_accessor :jpeg_quality

    # Allows to specify metafile rendering options.
    attr_accessor :metafile_rendering_options

    # Indicates the symbol set that is used to represent numbers while rendering to fixed page formats
    attr_accessor :numeral_format

    # Flag indicates whether it is required to optimize output of XPS.  If this flag is set redundant nested canvases and empty canvases are removed, also neighbor glyphs with the same formatting are concatenated.  Note: The accuracy of the content display may be affected if this property is set to true.  Default is false.
    attr_accessor :optimize_output

    # Determines number of pages to render
    attr_accessor :page_count

    # Determines 0-based index of the first page to render
    attr_accessor :page_index

    # Specifies the level in the PDF document outline at which to display Word bookmarks
    attr_accessor :bookmarks_outline_level

    # Specifies whether to convert footnote/endnote references in main text story into active hyperlinks. When clicked the hyperlink will lead to the corresponding footnote/endnote. Default is false.
    attr_accessor :create_note_hyperlinks

    # Specifies the PDF standards compliance level for output documents
    attr_accessor :compliance

    # Specifies the details for signing the output PDF document
    attr_accessor :digital_signature_details

    # A flag specifying whether the windowâ€™s title bar should display the document title taken from the Title entry of the document information dictionary.
    attr_accessor :display_doc_title

    # Specifies whether or not the images should be downsampled
    attr_accessor :downsample_images

    # Specifies the resolution in pixels per inch to which the images should be downsampled
    attr_accessor :downsample_resolution

    # Allows to specify downsample options.
    attr_accessor :downsample_options

    # Controls how fonts are embedded into the resulting PDF documents
    attr_accessor :embed_full_fonts

    # Determines whether or not to embed standard windows fonts Arial and Times New Roman
    attr_accessor :embed_standard_windows_fonts

    # Specifies the details for encrypting the output PDF document
    attr_accessor :encryption_details

    # Specifies how many levels in the PDF document outline to show expanded when the PDF file is viewed
    attr_accessor :expanded_outline_levels

    # Determines whether or not to export custom properties of document as Metadata
    attr_accessor :export_custom_properties_as_metadata

    # Determines whether or not to export document structure
    attr_accessor :export_document_structure

    # Specifies the font embedding mode
    attr_accessor :font_embedding_mode

    # Specifies how many levels of headings (paragraphs formatted with the Heading styles) to include in the PDF document outline
    attr_accessor :headings_outline_levels

    # Specifies compression type to be used for all images in the document
    attr_accessor :image_compression

    # Determines whether hyperlinks in the output Pdf document are forced to be opened in a new window (or tab) of a browser
    attr_accessor :open_hyperlinks_in_new_window

    # Allows to specify outline options
    attr_accessor :outline_options

    # Specifies how the PDF document should be displayed when opened in the PDF reader
    attr_accessor :page_mode

    # Specifies how the color space will be selected for the images in PDF document.
    attr_accessor :image_color_space_export_mode

    # Specifies whether to preserve Microsoft Word form fields as form fields in PDF or convert them to text
    attr_accessor :preserve_form_fields

    # Specifies compression type to be used for all textual content in the document
    attr_accessor :text_compression

    # Determines whether or not to substitute TrueType fonts Arial, Times New Roman, Courier New and Symbol with core PDF Type 1 fonts
    attr_accessor :use_core_fonts

    # Determines whether the document should be saved using a booklet printing layout
    attr_accessor :use_book_fold_printing_settings

    # Determines what type of zoom should be applied when a document is opened with a PDF viewer
    attr_accessor :zoom_behavior

    # Determines zoom factor (in percentages) for a document
    attr_accessor :zoom_factor

    # Gets or sets a value determining the way  are exported to PDF file. Default value is .
    attr_accessor :custom_properties_export

    # Gets or sets a value determining whether or not to preblend transparent images with black background color.
    attr_accessor :preblend_images


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'color_mode' => :'ColorMode',
        :'save_format' => :'SaveFormat',
        :'file_name' => :'FileName',
        :'dml_rendering_mode' => :'DmlRenderingMode',
        :'dml_effects_rendering_mode' => :'DmlEffectsRenderingMode',
        :'zip_output' => :'ZipOutput',
        :'update_sdt_content' => :'UpdateSdtContent',
        :'update_fields' => :'UpdateFields',
        :'jpeg_quality' => :'JpegQuality',
        :'metafile_rendering_options' => :'MetafileRenderingOptions',
        :'numeral_format' => :'NumeralFormat',
        :'optimize_output' => :'OptimizeOutput',
        :'page_count' => :'PageCount',
        :'page_index' => :'PageIndex',
        :'bookmarks_outline_level' => :'BookmarksOutlineLevel',
        :'create_note_hyperlinks' => :'CreateNoteHyperlinks',
        :'compliance' => :'Compliance',
        :'digital_signature_details' => :'DigitalSignatureDetails',
        :'display_doc_title' => :'DisplayDocTitle',
        :'downsample_images' => :'DownsampleImages',
        :'downsample_resolution' => :'DownsampleResolution',
        :'downsample_options' => :'DownsampleOptions',
        :'embed_full_fonts' => :'EmbedFullFonts',
        :'embed_standard_windows_fonts' => :'EmbedStandardWindowsFonts',
        :'encryption_details' => :'EncryptionDetails',
        :'expanded_outline_levels' => :'ExpandedOutlineLevels',
        :'export_custom_properties_as_metadata' => :'ExportCustomPropertiesAsMetadata',
        :'export_document_structure' => :'ExportDocumentStructure',
        :'font_embedding_mode' => :'FontEmbeddingMode',
        :'headings_outline_levels' => :'HeadingsOutlineLevels',
        :'image_compression' => :'ImageCompression',
        :'open_hyperlinks_in_new_window' => :'OpenHyperlinksInNewWindow',
        :'outline_options' => :'OutlineOptions',
        :'page_mode' => :'PageMode',
        :'image_color_space_export_mode' => :'ImageColorSpaceExportMode',
        :'preserve_form_fields' => :'PreserveFormFields',
        :'text_compression' => :'TextCompression',
        :'use_core_fonts' => :'UseCoreFonts',
        :'use_book_fold_printing_settings' => :'UseBookFoldPrintingSettings',
        :'zoom_behavior' => :'ZoomBehavior',
        :'zoom_factor' => :'ZoomFactor',
        :'custom_properties_export' => :'CustomPropertiesExport',
        :'preblend_images' => :'PreblendImages'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'color_mode' => :'String',
        :'save_format' => :'String',
        :'file_name' => :'String',
        :'dml_rendering_mode' => :'String',
        :'dml_effects_rendering_mode' => :'String',
        :'zip_output' => :'BOOLEAN',
        :'update_sdt_content' => :'BOOLEAN',
        :'update_fields' => :'BOOLEAN',
        :'jpeg_quality' => :'Integer',
        :'metafile_rendering_options' => :'MetafileRenderingOptionsData',
        :'numeral_format' => :'String',
        :'optimize_output' => :'BOOLEAN',
        :'page_count' => :'Integer',
        :'page_index' => :'Integer',
        :'bookmarks_outline_level' => :'Integer',
        :'create_note_hyperlinks' => :'BOOLEAN',
        :'compliance' => :'String',
        :'digital_signature_details' => :'PdfDigitalSignatureDetailsData',
        :'display_doc_title' => :'BOOLEAN',
        :'downsample_images' => :'BOOLEAN',
        :'downsample_resolution' => :'Integer',
        :'downsample_options' => :'DownsampleOptionsData',
        :'embed_full_fonts' => :'BOOLEAN',
        :'embed_standard_windows_fonts' => :'BOOLEAN',
        :'encryption_details' => :'PdfEncryptionDetailsData',
        :'expanded_outline_levels' => :'Integer',
        :'export_custom_properties_as_metadata' => :'BOOLEAN',
        :'export_document_structure' => :'BOOLEAN',
        :'font_embedding_mode' => :'String',
        :'headings_outline_levels' => :'Integer',
        :'image_compression' => :'String',
        :'open_hyperlinks_in_new_window' => :'BOOLEAN',
        :'outline_options' => :'OutlineOptionsData',
        :'page_mode' => :'String',
        :'image_color_space_export_mode' => :'String',
        :'preserve_form_fields' => :'BOOLEAN',
        :'text_compression' => :'String',
        :'use_core_fonts' => :'BOOLEAN',
        :'use_book_fold_printing_settings' => :'BOOLEAN',
        :'zoom_behavior' => :'String',
        :'zoom_factor' => :'Integer',
        :'custom_properties_export' => :'String',
        :'preblend_images' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'ColorMode')
        self.color_mode = attributes[:'ColorMode']
      end

      if attributes.has_key?(:'SaveFormat')
        self.save_format = attributes[:'SaveFormat']
      end

      if attributes.has_key?(:'FileName')
        self.file_name = attributes[:'FileName']
      end

      if attributes.has_key?(:'DmlRenderingMode')
        self.dml_rendering_mode = attributes[:'DmlRenderingMode']
      end

      if attributes.has_key?(:'DmlEffectsRenderingMode')
        self.dml_effects_rendering_mode = attributes[:'DmlEffectsRenderingMode']
      end

      if attributes.has_key?(:'ZipOutput')
        self.zip_output = attributes[:'ZipOutput']
      end

      if attributes.has_key?(:'UpdateSdtContent')
        self.update_sdt_content = attributes[:'UpdateSdtContent']
      end

      if attributes.has_key?(:'UpdateFields')
        self.update_fields = attributes[:'UpdateFields']
      end

      if attributes.has_key?(:'JpegQuality')
        self.jpeg_quality = attributes[:'JpegQuality']
      end

      if attributes.has_key?(:'MetafileRenderingOptions')
        self.metafile_rendering_options = attributes[:'MetafileRenderingOptions']
      end

      if attributes.has_key?(:'NumeralFormat')
        self.numeral_format = attributes[:'NumeralFormat']
      end

      if attributes.has_key?(:'OptimizeOutput')
        self.optimize_output = attributes[:'OptimizeOutput']
      end

      if attributes.has_key?(:'PageCount')
        self.page_count = attributes[:'PageCount']
      end

      if attributes.has_key?(:'PageIndex')
        self.page_index = attributes[:'PageIndex']
      end

      if attributes.has_key?(:'BookmarksOutlineLevel')
        self.bookmarks_outline_level = attributes[:'BookmarksOutlineLevel']
      end

      if attributes.has_key?(:'CreateNoteHyperlinks')
        self.create_note_hyperlinks = attributes[:'CreateNoteHyperlinks']
      end

      if attributes.has_key?(:'Compliance')
        self.compliance = attributes[:'Compliance']
      end

      if attributes.has_key?(:'DigitalSignatureDetails')
        self.digital_signature_details = attributes[:'DigitalSignatureDetails']
      end

      if attributes.has_key?(:'DisplayDocTitle')
        self.display_doc_title = attributes[:'DisplayDocTitle']
      end

      if attributes.has_key?(:'DownsampleImages')
        self.downsample_images = attributes[:'DownsampleImages']
      end

      if attributes.has_key?(:'DownsampleResolution')
        self.downsample_resolution = attributes[:'DownsampleResolution']
      end

      if attributes.has_key?(:'DownsampleOptions')
        self.downsample_options = attributes[:'DownsampleOptions']
      end

      if attributes.has_key?(:'EmbedFullFonts')
        self.embed_full_fonts = attributes[:'EmbedFullFonts']
      end

      if attributes.has_key?(:'EmbedStandardWindowsFonts')
        self.embed_standard_windows_fonts = attributes[:'EmbedStandardWindowsFonts']
      end

      if attributes.has_key?(:'EncryptionDetails')
        self.encryption_details = attributes[:'EncryptionDetails']
      end

      if attributes.has_key?(:'ExpandedOutlineLevels')
        self.expanded_outline_levels = attributes[:'ExpandedOutlineLevels']
      end

      if attributes.has_key?(:'ExportCustomPropertiesAsMetadata')
        self.export_custom_properties_as_metadata = attributes[:'ExportCustomPropertiesAsMetadata']
      end

      if attributes.has_key?(:'ExportDocumentStructure')
        self.export_document_structure = attributes[:'ExportDocumentStructure']
      end

      if attributes.has_key?(:'FontEmbeddingMode')
        self.font_embedding_mode = attributes[:'FontEmbeddingMode']
      end

      if attributes.has_key?(:'HeadingsOutlineLevels')
        self.headings_outline_levels = attributes[:'HeadingsOutlineLevels']
      end

      if attributes.has_key?(:'ImageCompression')
        self.image_compression = attributes[:'ImageCompression']
      end

      if attributes.has_key?(:'OpenHyperlinksInNewWindow')
        self.open_hyperlinks_in_new_window = attributes[:'OpenHyperlinksInNewWindow']
      end

      if attributes.has_key?(:'OutlineOptions')
        self.outline_options = attributes[:'OutlineOptions']
      end

      if attributes.has_key?(:'PageMode')
        self.page_mode = attributes[:'PageMode']
      end

      if attributes.has_key?(:'ImageColorSpaceExportMode')
        self.image_color_space_export_mode = attributes[:'ImageColorSpaceExportMode']
      end

      if attributes.has_key?(:'PreserveFormFields')
        self.preserve_form_fields = attributes[:'PreserveFormFields']
      end

      if attributes.has_key?(:'TextCompression')
        self.text_compression = attributes[:'TextCompression']
      end

      if attributes.has_key?(:'UseCoreFonts')
        self.use_core_fonts = attributes[:'UseCoreFonts']
      end

      if attributes.has_key?(:'UseBookFoldPrintingSettings')
        self.use_book_fold_printing_settings = attributes[:'UseBookFoldPrintingSettings']
      end

      if attributes.has_key?(:'ZoomBehavior')
        self.zoom_behavior = attributes[:'ZoomBehavior']
      end

      if attributes.has_key?(:'ZoomFactor')
        self.zoom_factor = attributes[:'ZoomFactor']
      end

      if attributes.has_key?(:'CustomPropertiesExport')
        self.custom_properties_export = attributes[:'CustomPropertiesExport']
      end

      if attributes.has_key?(:'PreblendImages')
        self.preblend_images = attributes[:'PreblendImages']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          color_mode == o.color_mode &&
          save_format == o.save_format &&
          file_name == o.file_name &&
          dml_rendering_mode == o.dml_rendering_mode &&
          dml_effects_rendering_mode == o.dml_effects_rendering_mode &&
          zip_output == o.zip_output &&
          update_sdt_content == o.update_sdt_content &&
          update_fields == o.update_fields &&
          jpeg_quality == o.jpeg_quality &&
          metafile_rendering_options == o.metafile_rendering_options &&
          numeral_format == o.numeral_format &&
          optimize_output == o.optimize_output &&
          page_count == o.page_count &&
          page_index == o.page_index &&
          bookmarks_outline_level == o.bookmarks_outline_level &&
          create_note_hyperlinks == o.create_note_hyperlinks &&
          compliance == o.compliance &&
          digital_signature_details == o.digital_signature_details &&
          display_doc_title == o.display_doc_title &&
          downsample_images == o.downsample_images &&
          downsample_resolution == o.downsample_resolution &&
          downsample_options == o.downsample_options &&
          embed_full_fonts == o.embed_full_fonts &&
          embed_standard_windows_fonts == o.embed_standard_windows_fonts &&
          encryption_details == o.encryption_details &&
          expanded_outline_levels == o.expanded_outline_levels &&
          export_custom_properties_as_metadata == o.export_custom_properties_as_metadata &&
          export_document_structure == o.export_document_structure &&
          font_embedding_mode == o.font_embedding_mode &&
          headings_outline_levels == o.headings_outline_levels &&
          image_compression == o.image_compression &&
          open_hyperlinks_in_new_window == o.open_hyperlinks_in_new_window &&
          outline_options == o.outline_options &&
          page_mode == o.page_mode &&
          image_color_space_export_mode == o.image_color_space_export_mode &&
          preserve_form_fields == o.preserve_form_fields &&
          text_compression == o.text_compression &&
          use_core_fonts == o.use_core_fonts &&
          use_book_fold_printing_settings == o.use_book_fold_printing_settings &&
          zoom_behavior == o.zoom_behavior &&
          zoom_factor == o.zoom_factor &&
          custom_properties_export == o.custom_properties_export &&
          preblend_images == o.preblend_images
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [color_mode, save_format, file_name, dml_rendering_mode, dml_effects_rendering_mode, zip_output, update_sdt_content, update_fields, jpeg_quality, metafile_rendering_options, numeral_format, optimize_output, page_count, page_index, bookmarks_outline_level, create_note_hyperlinks, compliance, digital_signature_details, display_doc_title, downsample_images, downsample_resolution, downsample_options, embed_full_fonts, embed_standard_windows_fonts, encryption_details, expanded_outline_levels, export_custom_properties_as_metadata, export_document_structure, font_embedding_mode, headings_outline_levels, image_compression, open_hyperlinks_in_new_window, outline_options, page_mode, image_color_space_export_mode, preserve_form_fields, text_compression, use_core_fonts, use_book_fold_printing_settings, zoom_behavior, zoom_factor, custom_properties_export, preblend_images].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
